// Code generated by golex. DO NOT EDIT.

package lexpragma

import "strings"

import yaccPragmaToken "github.com/bhbosman/yaccpragma"

const (
	INITIAL = iota
)

func (self *Handler) readLexem() Lexem {

yystate0:

	self.buf = self.buf[:0]

	goto yystart1

yystate1:
	self.current = self.GetChar()
yystart1:
	switch {
	default:
		goto yyabort
	case self.current == '"':
		goto yystate3
	case self.current == '#':
		goto yystate6
	case self.current == ':':
		goto yystate13
	case self.current == 'I':
		goto yystate15
	case self.current == 'L':
		goto yystate17
	case self.current == '\t' || self.current == '\n' || self.current == '\r' || self.current == ' ':
		goto yystate2
	case self.current == 'p':
		goto yystate18
	case self.current == 'v':
		goto yystate24
	case self.current >= 'A' && self.current <= 'H' || self.current == 'J' || self.current == 'K' || self.current >= 'M' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'o' || self.current >= 'q' && self.current <= 'u' || self.current >= 'w' && self.current <= 'z':
		goto yystate14
	}

yystate2:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule6
	case self.current == '\t' || self.current == '\n' || self.current == '\r' || self.current == ' ':
		goto yystate2
	}

yystate3:
	self.current = self.GetChar()
	switch {
	default:
		goto yyabort
	case self.current == '"':
		goto yystate4
	case self.current == '\\':
		goto yystate5
	case self.current >= '\x01' && self.current <= '!' || self.current >= '#' && self.current <= '[' || self.current >= ']' && self.current <= 'Ã¿':
		goto yystate3
	}

yystate4:
	self.current = self.GetChar()
	goto yyrule5

yystate5:
	self.current = self.GetChar()
	switch {
	default:
		goto yyabort
	case self.current >= '\x01' && self.current <= '\t' || self.current >= '\v' && self.current <= 'Ã¿':
		goto yystate3
	}

yystate6:
	self.current = self.GetChar()
	switch {
	default:
		goto yyabort
	case self.current == 'p':
		goto yystate7
	}

yystate7:
	self.current = self.GetChar()
	switch {
	default:
		goto yyabort
	case self.current == 'r':
		goto yystate8
	}

yystate8:
	self.current = self.GetChar()
	switch {
	default:
		goto yyabort
	case self.current == 'a':
		goto yystate9
	}

yystate9:
	self.current = self.GetChar()
	switch {
	default:
		goto yyabort
	case self.current == 'g':
		goto yystate10
	}

yystate10:
	self.current = self.GetChar()
	switch {
	default:
		goto yyabort
	case self.current == 'm':
		goto yystate11
	}

yystate11:
	self.current = self.GetChar()
	switch {
	default:
		goto yyabort
	case self.current == 'a':
		goto yystate12
	}

yystate12:
	self.current = self.GetChar()
	goto yyrule1

yystate13:
	self.current = self.GetChar()
	goto yyrule7

yystate14:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule8
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'z':
		goto yystate14
	}

yystate15:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule8
	case self.current == 'D':
		goto yystate16
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'C' || self.current >= 'E' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'z':
		goto yystate14
	}

yystate16:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule3
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'z':
		goto yystate14
	}

yystate17:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule8
	case self.current == '"':
		goto yystate3
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'z':
		goto yystate14
	}

yystate18:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule8
	case self.current == 'r':
		goto yystate19
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'q' || self.current >= 's' && self.current <= 'z':
		goto yystate14
	}

yystate19:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule8
	case self.current == 'e':
		goto yystate20
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'd' || self.current >= 'f' && self.current <= 'z':
		goto yystate14
	}

yystate20:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule8
	case self.current == 'f':
		goto yystate21
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'e' || self.current >= 'g' && self.current <= 'z':
		goto yystate14
	}

yystate21:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule8
	case self.current == 'i':
		goto yystate22
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'h' || self.current >= 'j' && self.current <= 'z':
		goto yystate14
	}

yystate22:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule8
	case self.current == 'x':
		goto yystate23
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'w' || self.current == 'y' || self.current == 'z':
		goto yystate14
	}

yystate23:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule2
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'z':
		goto yystate14
	}

yystate24:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule8
	case self.current == 'e':
		goto yystate25
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'd' || self.current >= 'f' && self.current <= 'z':
		goto yystate14
	}

yystate25:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule8
	case self.current == 'r':
		goto yystate26
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'q' || self.current >= 's' && self.current <= 'z':
		goto yystate14
	}

yystate26:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule8
	case self.current == 's':
		goto yystate27
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'r' || self.current >= 't' && self.current <= 'z':
		goto yystate14
	}

yystate27:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule8
	case self.current == 'i':
		goto yystate28
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'h' || self.current >= 'j' && self.current <= 'z':
		goto yystate14
	}

yystate28:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule8
	case self.current == 'o':
		goto yystate29
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'n' || self.current >= 'p' && self.current <= 'z':
		goto yystate14
	}

yystate29:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule8
	case self.current == 'n':
		goto yystate30
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'm' || self.current >= 'o' && self.current <= 'z':
		goto yystate14
	}

yystate30:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule4
	case self.current >= '0' && self.current <= '9' || self.current >= 'A' && self.current <= 'Z' || self.current == '_' || self.current >= 'a' && self.current <= 'z':
		goto yystate14
	}

yyrule1: // "#"pragma
	{
		return NewLexemStringValue(yaccPragmaToken.RwPragma, self.TokenName, string(self.buf))
	}
yyrule2: // prefix
	{
		return NewLexemStringValue(yaccPragmaToken.RwPrefix, self.TokenName, string(self.buf))
	}
yyrule3: // ID
	{
		return NewLexemStringValue(yaccPragmaToken.RwId, self.TokenName, string(self.buf))
	}
yyrule4: // version
	{
		return NewLexemStringValue(yaccPragmaToken.RwVersion, self.TokenName, string(self.buf))
	}
yyrule5: // L?\"(\\.|[^\\"])*\"
	{

		{
			s := strings.TrimSpace(string(self.buf[1 : len(self.buf)-1]))
			return NewLexemStringValue(yaccPragmaToken.StringLiteral, self.TokenName, s)
		}
		goto yystate0
	}
yyrule6: // [ \t\r\n]+
	{
		return NewLexemStringValue(yaccPragmaToken.WhiteSpace, self.TokenName, string(self.buf))
	}
yyrule7: // ":"
	{
		return NewLexemNoValue(int(':'), self.TokenName)
	}
yyrule8: // [a-zA-Z_][a-zA-Z0-9_]*
	if true { // avoid go vet determining the below panic will not be reached

		s := strings.TrimSpace(string(self.buf[:len(self.buf)]))
		return NewLexemStringValue(yaccPragmaToken.Identifier, self.TokenName, s)
	}
	panic("unreachable")

yyabort: // no lexem recognized
	//
	// silence unused label errors for build and satisfy go vet reachability analysis
	//
	{
		if false {
			goto yyabort
		}
		if false {
			goto yystate0
		}
		if false {
			goto yystate1
		}
	}

	return NewLexemEofValue()
}
