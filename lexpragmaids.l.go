// Code generated by golex. DO NOT EDIT.

package lexpragmaids

import "strings"
import yaccPragmaIdsToken "github.com/bhbosman/yaccpragmaids"

const (
	INITIAL = iota
)

func (self *Handler) readLexem() (*Lexem, error) {

yystate0:

	self.buf = self.buf[:0]

	goto yystart1

yystate1:
	self.current = self.GetChar()
yystart1:
	switch {
	default:
		goto yyabort
	case self.current == '-' || self.current >= '/' && self.current <= '9' || self.current == ';' || self.current >= 'A' && self.current <= 'C' || self.current >= 'E' && self.current <= 'H' || self.current == 'J' || self.current == 'K' || self.current >= 'M' && self.current <= 'Q' || self.current >= 'S' && self.current <= 'Z' || self.current >= 'a' && self.current <= 'z':
		goto yystate2
	case self.current == '.':
		goto yystate3
	case self.current == ':':
		goto yystate4
	case self.current == 'D':
		goto yystate5
	case self.current == 'I':
		goto yystate8
	case self.current == 'L':
		goto yystate11
	case self.current == 'R':
		goto yystate16
	}

yystate2:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule7
	case self.current == '-' || self.current >= '/' && self.current <= '9' || self.current == ';' || self.current >= 'A' && self.current <= 'Z' || self.current >= 'a' && self.current <= 'z':
		goto yystate2
	}

yystate3:
	self.current = self.GetChar()
	goto yyrule6

yystate4:
	self.current = self.GetChar()
	goto yyrule5

yystate5:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule7
	case self.current == '-' || self.current >= '/' && self.current <= '9' || self.current == ';' || self.current == 'A' || self.current == 'B' || self.current >= 'D' && self.current <= 'Z' || self.current >= 'a' && self.current <= 'z':
		goto yystate2
	case self.current == 'C':
		goto yystate6
	}

yystate6:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule7
	case self.current == '-' || self.current >= '/' && self.current <= '9' || self.current == ';' || self.current >= 'A' && self.current <= 'D' || self.current >= 'F' && self.current <= 'Z' || self.current >= 'a' && self.current <= 'z':
		goto yystate2
	case self.current == 'E':
		goto yystate7
	}

yystate7:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule4
	case self.current == '-' || self.current >= '/' && self.current <= '9' || self.current == ';' || self.current >= 'A' && self.current <= 'Z' || self.current >= 'a' && self.current <= 'z':
		goto yystate2
	}

yystate8:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule7
	case self.current == '-' || self.current >= '/' && self.current <= '9' || self.current == ';' || self.current >= 'A' && self.current <= 'C' || self.current >= 'E' && self.current <= 'Z' || self.current >= 'a' && self.current <= 'z':
		goto yystate2
	case self.current == 'D':
		goto yystate9
	}

yystate9:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule7
	case self.current == '-' || self.current >= '/' && self.current <= '9' || self.current == ';' || self.current >= 'A' && self.current <= 'K' || self.current >= 'M' && self.current <= 'Z' || self.current >= 'a' && self.current <= 'z':
		goto yystate2
	case self.current == 'L':
		goto yystate10
	}

yystate10:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule1
	case self.current == '-' || self.current >= '/' && self.current <= '9' || self.current == ';' || self.current >= 'A' && self.current <= 'Z' || self.current >= 'a' && self.current <= 'z':
		goto yystate2
	}

yystate11:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule7
	case self.current == '-' || self.current >= '/' && self.current <= '9' || self.current == ';' || self.current >= 'A' && self.current <= 'N' || self.current >= 'P' && self.current <= 'Z' || self.current >= 'a' && self.current <= 'z':
		goto yystate2
	case self.current == 'O':
		goto yystate12
	}

yystate12:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule7
	case self.current == '-' || self.current >= '/' && self.current <= '9' || self.current == ';' || self.current == 'A' || self.current == 'B' || self.current >= 'D' && self.current <= 'Z' || self.current >= 'a' && self.current <= 'z':
		goto yystate2
	case self.current == 'C':
		goto yystate13
	}

yystate13:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule7
	case self.current == '-' || self.current >= '/' && self.current <= '9' || self.current == ';' || self.current >= 'B' && self.current <= 'Z' || self.current >= 'a' && self.current <= 'z':
		goto yystate2
	case self.current == 'A':
		goto yystate14
	}

yystate14:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule7
	case self.current == '-' || self.current >= '/' && self.current <= '9' || self.current == ';' || self.current >= 'A' && self.current <= 'K' || self.current >= 'M' && self.current <= 'Z' || self.current >= 'a' && self.current <= 'z':
		goto yystate2
	case self.current == 'L':
		goto yystate15
	}

yystate15:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule2
	case self.current == '-' || self.current >= '/' && self.current <= '9' || self.current == ';' || self.current >= 'A' && self.current <= 'Z' || self.current >= 'a' && self.current <= 'z':
		goto yystate2
	}

yystate16:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule7
	case self.current == '-' || self.current >= '/' && self.current <= '9' || self.current == ';' || self.current >= 'A' && self.current <= 'L' || self.current >= 'N' && self.current <= 'Z' || self.current >= 'a' && self.current <= 'z':
		goto yystate2
	case self.current == 'M':
		goto yystate17
	}

yystate17:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule7
	case self.current == '-' || self.current >= '/' && self.current <= '9' || self.current == ';' || self.current >= 'A' && self.current <= 'H' || self.current >= 'J' && self.current <= 'Z' || self.current >= 'a' && self.current <= 'z':
		goto yystate2
	case self.current == 'I':
		goto yystate18
	}

yystate18:
	self.current = self.GetChar()
	switch {
	default:
		goto yyrule3
	case self.current == '-' || self.current >= '/' && self.current <= '9' || self.current == ';' || self.current >= 'A' && self.current <= 'Z' || self.current >= 'a' && self.current <= 'z':
		goto yystate2
	}

yyrule1: // IDL
	{
		return NewLexemStringValue(yaccPragmaIdsToken.RWIdl, self.TokenName, string(self.buf))
	}
yyrule2: // LOCAL
	{
		return NewLexemStringValue(yaccPragmaIdsToken.RWLocal, self.TokenName, string(self.buf))
	}
yyrule3: // RMI
	{
		return NewLexemStringValue(yaccPragmaIdsToken.RWRmi, self.TokenName, string(self.buf))
	}
yyrule4: // DCE
	{
		return NewLexemStringValue(yaccPragmaIdsToken.RWDce, self.TokenName, string(self.buf))
	}
yyrule5: // ":"
	{
		return NewLexemNoValue(int(':'), self.TokenName)
	}
yyrule6: // "."
	{
		return NewLexemNoValue(int('.'), self.TokenName)
	}
yyrule7: // [a-zA-Z0-9-/;]+
	if true { // avoid go vet determining the below panic will not be reached

		s := strings.TrimSpace(string(self.buf[:len(self.buf)]))
		return NewLexemStringValue(yaccPragmaIdsToken.Value, self.TokenName, s)
	}
	panic("unreachable")

yyabort: // no lexem recognized
	//
	// silence unused label errors for build and satisfy go vet reachability analysis
	//
	{
		if false {
			goto yyabort
		}
		if false {
			goto yystate0
		}
		if false {
			goto yystate1
		}
	}

	return NewLexemEofValue()
}
